
* Start
#+begin_src nix :tangle home.nix
{ config, lib, pkgs, ... }:

{

  #nix.settings.experimental-features = [ "nix-command" "flakes" ];
  nixpkgs.config.allowUnfree = true;
  nixpkgs.config.permittedInsecurePackages = [
    "openssl-1.1.1u"
    "python-2.7.18.6"
  ];
  targets.genericLinux.enable = true; # Enable this on non nixos
#+end_src

* COMMENT Theme
#+begin_src nix :tangle home.nix
qt.enable = true;
qt.style.name = "adwaita-dark";
gtk.enable = true;
gtk.theme.name = "Adwaita-dark";
dconf.settings = {
  "org/gnome/desktop/interface" = {
    color-scheme = "prefer-dark";
  };
};
#+end_src
* Home
#+begin_src nix :tangle home.nix
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = "keith";
  home.homeDirectory = "/home/keith";
  home = {
#+end_src

** State Version
#+begin_src nix :tangle home.nix
    # This value determines the Home Manager release that your configuration is
    # compatible with. This helps avoid breakage when a new Home Manager release
    # introduces backwards incompatible changes.
    #
    # You should not change this value, even if you update Home Manager. If you do
    # want to update the value, then make sure to first check the Home Manager
    # release notes.
    stateVersion = "23.05"; # Please read the comment before changing.
#+end_src

** Packages
#+begin_src nix :tangle home.nix
    # The home.packages option allows you to install Nix packages into your
    # environment.
    packages = [
      # Core Packages
      pkgs.libglvnd
      pkgs.mesa.drivers
      pkgs.killall
      pkgs.zip
      pkgs.unzip
      pkgs.light

      pkgs.alacritty #requires extra setup on non-Nixos #https://nixos.org/manual/nixpkgs/unstable/#nix-on-gnulinux
      pkgs.mcfly
      pkgs.discord
      pkgs.betterdiscordctl
      pkgs.thunderbird
      pkgs.yt-dlp
      pkgs.keepassxc
      pkgs.libreoffice
      pkgs.qutebrowser
      pkgs.virt-manager
      pkgs.gpodder
      pkgs.gparted
      pkgs.yt-dlp
      pkgs.tor-browser-bundle-bin
      pkgs.stow
      pkgs.luarocks
      pkgs.tldr
      pkgs.git
      pkgs.fzf
      pkgs.github-desktop
      pkgs.rsync
      pkgs.grsync
      pkgs.feh
      pkgs.htop
      pkgs.wget
      pkgs.gnupg
      pkgs.stow
      pkgs.cmake
      #pkgs.python3Full
      (pkgs.python310.withPackages(ps: with ps; [ beautifulsoup4 requests black]))
      #pkgs.python3.pkgs.pip
      pkgs.trash-cli
      #pkgs.xfce.xfce4-icon-theme
      #pkgs.libcanberra
      #pkgs.libcanberra-gtk3
      #pkgs.libcanberra-gtk2
      pkgs.dracula-theme

      # VMs
      pkgs.quickemu
      pkgs.quickgui

      # Gaming
      #pkgs.steam
      #pkgs.steam-run
      #(steam.override { extraPkgs = pkgs: [ mono gtk3 gtk3-x11 libgdiplus zlib ]; nativeOnly = true; }).run
      #(steam.override { withPrimus = true; extraPkgs = pkgs: [ bumblebee glxinfo ]; nativeOnly = true; }).run
      #(steam.override { withJava = true; })
      pkgs.lutris
      #pkgs.hicolor-icon-theme
      pkgs.heroic
      pkgs.gamemode
      pkgs.protonup-ng
      #pkgs.proton-ge
      pkgs.winetricks
      pkgs.protontricks
      pkgs.wine-staging
      #pkgs.wine-osu
      #pkgs.wine-tkg
      #pkgs.openmw

      # Game Dev
      #pkgs.godot
      pkgs.godot_4
      pkgs.unityhub
      #pkgs.blender

      # Torrenting
      pkgs.mullvad-vpn
      pkgs.qbittorrent

      # Thunar
      pkgs.xfce.thunar
      pkgs.xfce.thunar-volman
      pkgs.xfce.thunar-dropbox-plugin
      pkgs.xfce.thunar-archive-plugin
      pkgs.xfce.thunar-media-tags-plugin

      # Xorg
      pkgs.xdg-desktop-portal-gtk
      pkgs.xorg.libX11
      pkgs.xorg.libX11.dev
      pkgs.xorg.libxcb
      pkgs.xorg.libXft
      pkgs.xorg.libXinerama
	  pkgs.xorg.xinit
      pkgs.xorg.xinput

      pkgs.syncthing
      pkgs.syncthing-tray

      # Socials
      pkgs.discord
      pkgs.signal-desktop
      pkgs.zoom-us
      pkgs.slack
      pkgs.cava

      pkgs.ani-cli
      pkgs.mangal
      #pkgs.tachidesk

      pkgs.vim
      pkgs.neovim
      pkgs.emacs
      #pkgs.nix-doom-emacs
      pkgs.emacsPackages.lsp-pyright
      # Doom Emacs Deps
      pkgs.git
      pkgs.libpng
      pkgs.zlib
      pkgs.poppler_gi
      pkgs.ripgrep
      pkgs.fd
      pkgs.aspell
      pkgs.aspellDicts.en

      # # It is sometimes useful to fine-tune packages, for example, by applying
      # # overrides. You can do that directly here, just don't forget the
      # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
      # # fonts?
      # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

      # # You can also create simple shell scripts directly inside your
      # # configuration. For example, this adds a command 'my-hello' to your
      # # environment:
      # (pkgs.writeShellScriptBin "my-hello" ''
      #   echo "Hello, ${config.home.username}!"
      # '')
    ];
#+end_src

** File
#+begin_src nix :tangle home.nix
    # Home Manager is pretty good at managing dotfiles. The primary way to manage
    # plain files is through 'home.file'.
    file = {
      # # Building this configuration will create a copy of 'dotfiles/screenrc' in
      # # the Nix store. Activating the configuration will then make '~/.screenrc' a
      # # symlink to the Nix store copy.
      # ".screenrc".source = dotfiles/screenrc;

      # # You can also set the file content immediately.
      # ".gradle/gradle.properties".text = ''
      #   org.gradle.console=verbose
      #   org.gradle.daemon.idletimeout=3600000
      # '';
    };
#+end_src

** Enviroment Variables
#+begin_src nix :tangle home.nix
    # You can also manage environment variables but you will have to manually
    # source
    #
    #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
    #
    # or
    #
    #  /etc/profiles/per-user/keith/etc/profile.d/hm-session-vars.sh
    #
    # if you don't want to manage your shell through Home Manager.
    sessionVariables = {
      EDITOR = "emacs";
    };
#+end_src

** Cursor
#+begin_src nix :tangle home.nix
    pointerCursor = {
      package = pkgs.vanilla-dmz;
      name = "Vanilla-DMZ";
      gtk.enable = true;
      x11.enable = true;
      x11.defaultCursor = "X_cursor";
      size = 64;
    };
#+end_src

** End Home
#+begin_src nix :tangle home.nix
  };
#+end_src

* Programs
#+begin_src nix :tangle home.nix
programs.fzf = {
  #package = pkgs.fzf;
  enable = true;
  enableFishIntegration = true;
  enableBashIntegration = true;
};

programs.gh.enable = true;
programs.git.enable = true;

programs.mpv = {
  enable = true;
  #scripts = [ pkgs.mpvScripts.sponsorblock ];
  scripts = [ pkgs.mpvScripts.sponsorblock pkgs.mpvScripts.webtorrent-mpv-hook pkgs.mpvScripts.thumbnail pkgs.mpvScripts.mpris ];
};

# Systemlink vi/vim/vimdiff to nvim binary
programs.neovim.viAlias = true;
programs.neovim.vimAlias = true;
programs.neovim.vimdiffAlias = true;

programs.starship = {
  enable = true;
  enableFishIntegration = true;
  enableBashIntegration = true;
  enableTransience = true;
};
#+end_src

* Services
#+begin_src nix :tangle home.nix
  #xdg.portal = {
    #enable = true;
    # wlr.enable = true;
    # gtk portal needed to make gtk apps happy
    # extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
  #};

  #virtualisation.libvirtd.enable = true;

  #services.printing.enable = true;
  #services.emacs.enable = true;
  services.syncthing.enable = true;
  services.syncthing.tray.enable = true;
  #services.mullvad-vpn.enable = true;

  services.home-manager.autoUpgrade.frequency = "weekly";
#+end_src
* Home-Manager Enable
#+begin_src nix :tangle home.nix
  #hardware.opengl.driSupport32Bit = true;
  #programs.steam = {
  #  enable = true;
  #  remotePlay.openFirewall = true; # Open ports #in the firewall for Steam Remote Play
  #  dedicatedServer.openFirewall = true; # Open #ports in the firewall for Source Dedicated Server
  #};
  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
#+end_src
* end bracket
#+begin_src nix :tangle home.nix
}
#+end_src
